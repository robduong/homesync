#!/bin/bash
# This file was provided to me by Bobes
# https://github.com/bobes

# Status code legend:
#
#   *   Unstaged code
#   +   Staged code
#   %   Untracked code
#   $   Stashed code
#   #   Something else?  # TODO
#

#
# COLOURS
##########

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
GRAY="\[\033[1;30m\]"
PURPLE="\[\033[0;35m\]"
NONE="\[\e[0m\]"


#
# GIT STATUS
#############

function parse_git_branch {
  local gitdir="$(git rev-parse --git-dir 2>/dev/null)"
  [ -n "$gitdir" ] || return 1

  local rebase
  local branch

  if [ -f "$g/rebase-merge/interactive" ]; then
    rebase="|REBASE-i"
    branch="$(cat "$g/rebase-merge/head-name")"
  elif [ -d "$g/rebase-merge" ]; then
    rebase="|REBASE-m"
    branch="$(cat "$g/rebase-merge/head-name")"
  else
    if [ -d "$g/rebase-apply" ]; then
      if [ -f "$g/rebase-apply/rebasing" ]; then
        rebase="|REBASE"
      elif [ -f "$g/rebase-apply/applying" ]; then
        rebase="|AM"
      else
        rebase="|AM/REBASE"
      fi
    elif [ -f "$g/MERGE_HEAD" ]; then
      rebase="|MERGING"
    elif [ -f "$g/BISECT_LOG" ]; then
      rebase="|BISECTING"
    fi

    branch="$(git symbolic-ref HEAD 2>/dev/null)" || {

      branch="$(git describe --contains HEAD 2>/dev/null)" ||
      branch="$(cut -c1-7 "$g/HEAD" 2>/dev/null)..." ||
      branch="unknown"

      branch="($branch)"
    }
  fi

  local unstaged
  local staged
  local stash
  local untracked

  if [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then

    git diff --no-ext-diff --ignore-submodules \
      --quiet --exit-code || unstaged="*"

    if git rev-parse --quiet --verify HEAD >/dev/null; then
      git diff-index --cached --quiet \
        --ignore-submodules HEAD -- || staged="+"
    else
      staged="#"
    fi

    git rev-parse --verify refs/stash >/dev/null 2>&1 && stash="$"

    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
      untracked="%"
    fi

  elif [ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
    branch="GIT_DIR!"
  fi

  if [ -n "${1-}" ]; then
    printf "$1" "${branch##refs/heads/}$unstaged$staged$stash$untracked$rebase"
  else
    printf "(%s)" "${branch##refs/heads/}$unstaged$staged$stash$untracked$rebase"
  fi
}


#
# CHRUBY STATUS
###############

function parse_ruby_version {
  local version=$(echo $RUBY_VERSION)
  [ "$version" != "" ] && echo "$version "
}


#
# PROMPT
#########

export PS1="${RED}\$(parse_ruby_version)${BLUE}\u@\h ${GREEN}\w\n${GRAY}\$(parse_git_branch)${YELLOW}\\$>${NONE} "
export PROMPT_COMMAND='echo -ne "\033]0;$(basename "$(dirname "$PWD")")/$(basename "$PWD")\007"'  


#
# GIT ALIASES
##############

# This creates bash aliases for all git aliases
# e.g. git alias: a = add, bash alias: ga = git add

# Assuming git aliases are last in ~./gitconfig
# Find the line where the aliases are listed from and get all aliases
LINENUM=`grep -n --color=never "\[alias\]" ~/.gitconfig | cut -d ':' -f 1`
GITALIASES=`awk "NR>=$[LINENUM+1]" ~/.gitconfig | cut -d '=' -f 1`

#alias git='hub'
alias g='git'
for command in $GITALIASES
do
  alias "g$command"="g $command"
done
